
import java.io.File;
import groovy.xml.DOMBuilder
import groovy.xml.dom.DOMCategory
import groovy.xml.XmlUtil

//archivesBaseName = 'xite'
group = 'xite'
version = '0.1-SNAPSHOT'

defaultTasks 'clean', 'app', 'itest'

usePlugin 'groovy'
usePlugin 'eclipse'

// needed for integration tests
usePlugin(com.smokejumperit.gradle.ClassLoadersPlugin)

buildDirName = 'target'

appBuildDir = "${buildDirName}/app"

localRepo = ''
def m2userSettingsPath = System.getProperty('user.home') + File.separator + ".m2" + File.separator + "settings.xml"
def m2userSettingsFile = DOMBuilder.parse(new FileReader(m2userSettingsPath))
def m2userSettings = m2userSettingsFile.documentElement
use(DOMCategory){
  def foundLocalRepo = m2userSettings.localRepository[0]?.text()
  if (foundLocalRepo != null) localRepo = foundLocalRepo
}
logger.debug("using local repository ${localRepo}")

repositories {
    // libraries not in maven repo
    flatDir(dirs: file('lib'))
    // set to your local maven local repo
    // usually $HOME/.m2/repository
    mavenRepo urls: ["file://" + System.getProperty('user.home') + File.separator + ".m2" + File.separator + "repository/",
                     localRepo]
    mavenCentral()
}

dependencies {
    compile 'com.github.enr:markdownj-extras:0.2',
            'com.github.enr.markdownj:markdownj-core:0.4.M20100509',
            'commons-cli:commons-cli:1.2',
            'commons-lang:commons-lang:2.5',
            'commons-io:commons-io:1.4',
            'org.apache.commons:commons-exec:1.0.1',
            'commons-codec:commons-codec:1.4',
            'org.apache.ant:ant-nodeps:1.8.0',
            'org.apache.ant:ant-commons-net:1.8.0',
            'org.eclipse.jetty:jetty-server:7.0.1.v20091125',
            'org.slf4j:slf4j-api:1.6.0',
            'org.slf4j:slf4j-log4j12:1.6.0',
            'log4j:log4j:1.2.16'
    testCompile 'org.testng:testng:5.12.1'
    groovy module('org.codehaus.groovy:groovy-all:1.7.0')
}

buildscript {
  repositories {
    mavenRepo urls:'http://repo.smokejumperit.com'
  }
  dependencies {
    // classpath 'com.smokejumperit:gradle-plugins:0.6-SNAPSHOT'
    classpath 'com.smokejumperit:gradle-plugins:0.5.1'
  }
}


// --- integration tests
task itest (type: Test, dependsOn: ':app'){
  def projectRootDir = project.getRootDir().getAbsolutePath() 
  useTestNG()
  options {
    // listeners << 'org.uncommons.reportng.HTMLReporter,org.uncommons.reportng.JUnitXMLReporter'
    systemProperties.put('xite.itest.project.rootDir', projectRootDir)
  }
}

itest.doFirst {
  def xiteHomeFile = project.file(appBuildDir)
  def loader = project.classLoaderFor('testRuntime')
  def jardir = new File( xiteHomeFile, 'lib' )
  def jars   = jardir.listFiles().findAll { it.name.endsWith('.jar') } 
  jars.each { 
    def j = it.toURI().toURL()
    logger.debug("adding url ${j}")
    loader.addURL(j)
  }

  Paths = Class.forName( 'xite.Paths', true, loader )

  def xiteHome = xiteHomeFile.getAbsolutePath()
  def paths = Paths.newInstance(xiteHome)

  def itestDefaultConfigurationFile = new File(paths.confDirectory+'/xite-default.groovy')
  logger.debug("itestDefaultConfigurationFile ${itestDefaultConfigurationFile}")
  ConfigSlurper slurper = new ConfigSlurper(null)
  ConfigObject itestDefaultConfiguration = slurper.parse(itestDefaultConfigurationFile.toURL())

  paths.sourceDirectory = paths.normalize(project.file('test-app/src/xite').getAbsolutePath())
  def projectConfigurationFile = new File("${paths.sourceDirectory}/xite/site.groovy")
  logger.debug("projectConfigurationFile ${projectConfigurationFile} ${projectConfigurationFile.getAbsolutePath()}")
  def projectConfig = new ConfigSlurper().parse(projectConfigurationFile.toURL())
  def itestFinalConfiguration = (ConfigObject) itestDefaultConfiguration.merge(projectConfig);
  paths.destinationDirectory = paths.normalize(project.file('target/itest').getAbsolutePath())
    
  // GroovyScriptEngine initialization
  def roots = [ paths.pluginsDirectory ] as String[]
  GroovyScriptEngine gse = new GroovyScriptEngine(roots) //, loader);
  def cl = gse.getParentClassLoader()
  jars.each { 
    def j = it.toURI().toURL()
    logger.debug("adding url ${j}")
    cl.addURL(j)
  }
  // binding setting
  Binding binding = new Binding();
  binding.setVariable("xite_paths", paths);
  binding.setVariable("xite_debug", false);
  binding.setVariable("xite_config", itestFinalConfiguration);
  binding.setVariable("xite_gse", gse);
  gse.run('xite/init.groovy', binding);
  gse.run('xite/process.groovy', binding);
}

task 'xite-deps'(dependsOn: configurations.default.buildArtifacts, type: Copy) {
    into("${appBuildDir}/lib")
    from configurations.default
    from configurations.default.allArtifacts*.file // (xite jars)
    description = 'Creates the working application in target directory.'
}

task 'xite-bin'(dependsOn: 'xite-deps', type:Copy) {
    from 'src/dist/bin/xite.sh'
    into "${appBuildDir}/bin"
    rename('.sh$', '')
    description = 'Creates the working application in target directory.'
}

task 'xite-plugins'(dependsOn: 'xite-bin', type:Copy) {
    from 'src/dist/plugins'
    into "${appBuildDir}/plugins"
    description = 'Creates the working application in target directory.'
}

task 'xite-conf'(dependsOn: 'xite-plugins', type:Copy) {
    from 'src/dist/conf'
    into "${appBuildDir}/conf"
    description = 'Creates the working application in target directory.'
}

task app(dependsOn: 'xite-conf') {
    description = 'Creates the working application in target directory.'
}

app.doLast { 
    logger.debug("App builded in ${appBuildDir}")
    def binDir = new File("${appBuildDir}/bin")
    if (binDir.exists()) {
      ant.chmod(perm: "+x", dir: binDir, includes: '*')
    }
}

task 'xite-doc'(dependsOn: ':app', type:Copy) {
    from 'README.markdown'
    into "${appBuildDir}/"
    rename('.markdown$', '.txt')
    description = 'Add docs for distribution.'
}

task dist(type: Zip, dependsOn: ':xite-doc') {
    description = 'Creates the distributable archive.'
    zipFileSet(dir: appBuildDir)
}

dist.doLast { logger.debug("Distribution file ${dist.archiveName}") }

