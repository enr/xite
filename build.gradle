
// --- release plugin
// see: http://tellurianring.com/wiki/gradle/release
apply from: "https://launchpad.net/gradle-release/trunk/latest/+download/apply.groovy"

// --- about plugin
// see: http://evgeny-goldin.com/wiki/Gradle-about-plugin

group = 'com.github.enr' // Replace with your GitHub username
//version = '0.0.1' // Or whatever your version is

buildscript {
    repositories { mavenRepo url: 'http://evgenyg.artifactoryonline.com/evgenyg/repo/' }
    dependencies { classpath "com.github.goldin.plugins:gradle:0.1.3" }
}

if (['1.7'].contains(System.getProperty('java.version'))) {
    // After 'group' is set...
    apply from:'http://smokejumperit.com/github-dev.gradle'

    //   gradle uploadArchives -Dgithub.password=***
    ghUpload {
        username = 'enr' // If the code guesses the username wrong: see source for defaults
        //password = '***' // Or set Java prop 'github.password' or system env 'GITHUB_PASS'
    }
}

ext {
    //groovyVersion = '2.0.0-beta-3'
    javaModules = [
        ':modules:core', ':modules:acceptance-tests'
    ]
    acceptanceTests = [':modules:acceptance-tests']
}

allprojects { project ->
    group = 'com.github.enr'
        
    buildDir = 'target'
    
    repositories {
        mavenLocal()
        mavenCentral()
        flatDir(dirs: file('lib'))        
        maven {
            url 'https://oss.sonatype.org/content/repositories/releases/'
        }
    }
}


subprojects {

    if (project.path in javaModules) {
        apply plugin: 'groovy'
        apply plugin: 'eclipse'
        apply plugin: 'about'        
        
        // work-around for jdk 7 javac warning for setting an older source without bootclasspath
        if (['1.7'].contains(System.getProperty('java.version'))) {
            println "Java 7 detected (Java ${System.getProperty('java.version')})"
            compileGroovy.options.bootClasspath = '/opt/java/jdk1.6.0_24/jre/lib/rt.jar'
            compileJava.options.bootClasspath = '/opt/java/jdk1.6.0_24/jre/lib/rt.jar'
            test.bootstrapClasspath = files('/opt/java/jdk1.6.0_24/jre/lib/rt.jar') + test.bootstrapClasspath
        }

        configurations {
            compile.transitive = true
            testCompile.transitive = true
        }

        dependencies {
            compile 'com.github.enr:markdownj-extras:0.4',
                    'com.madgag:markdownj-core:0.4.1',
                    'commons-cli:commons-cli:1.2',
                    'commons-lang:commons-lang:2.5',
                    'commons-io:commons-io:1.4',
                    'org.apache.commons:commons-exec:1.0.1',
                    'commons-codec:commons-codec:1.4',
                    'org.apache.ant:ant-nodeps:1.8.1',
                    'org.apache.ant:ant-commons-net:1.8.0',
                    'org.eclipse.jetty:jetty-server:7.2.2.v20101205',
                    'org.eclipse.jetty:jetty-util:7.2.2.v20101205',
                    'org.slf4j:slf4j-api:1.6.0',
                    'org.slf4j:slf4j-log4j12:1.6.0',
                    'log4j:log4j:1.2.16'
            testCompile 'org.testng:testng:6.1.1',
                        'com.beust:jcommander:1.12',    // required from testng
                        'com.google.inject:guice:2.0',  // required from testng
                        'org.beanshell:bsh:2.0b4',      // required from testng
                        'junit:junit:3.8.1',            // required from testng
                        'org.uncommons.reportng:reportng:1.1.3',
                        'org.apache.velocity:velocity:1.6.2',           // required from reportng
                        'commons-collections:commons-collections:3.2.1' // required from reportng
            groovy  'org.codehaus.groovy:groovy:1.8.1'
        }

        test {
            useTestNG()
        }
        
        archivesBaseName = "xite-${project.name}"

        sourceCompatibility = 1.6
        targetCompatibility = 1.6

 
/* 
tasks.withType(Compile) {
    options.compilerArgs << "-Xlint:deprecation"
}
*/
        jar {
            manifest {
                attributes( "Implementation-Title": "Gradle",
                            "Implementation-Version": version,
                            "Project":project.name)
            }
        }
        
        about { dumpDependencies = false }
        
        eclipse {
            project {
                name = "xite-${project.name}"
            }
            classpath {
                // to keep the same depth in the build from in and outside Eclipse
                defaultOutputDir = new File("${project.buildDir}/eclipse/classes");
                downloadJavadoc = true
            }
        }
    }

    if (project.path in acceptanceTests) {
        test.enabled = false
        task sut(   dependsOn: [':modules:core:test', ':modules:core:test', ':modules:core:installApp'],
                    description: 'Builds the system under test (using installApp).') << {
                    test.enabled = true
        }    
        task uat(   dependsOn: [sut, test], 
                    description: 'Runs the user acceptance tests.') << {
                    test.enabled = true
        }
    }
}


