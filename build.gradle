
import java.text.SimpleDateFormat

// --- release plugin
// see: http://tellurianring.com/wiki/gradle/release
apply from: "https://launchpad.net/gradle-release/trunk/latest/+download/apply.groovy"

group = 'com.github.enr'


buildscript {
    repositories { mavenRepo url: 'http://evgenyg.artifactoryonline.com/evgenyg/repo/' }
    dependencies { classpath "com.github.goldin.plugins:gradle:0.1.3" }
}


ext {
    groovyVersion = '2.0.1'
    jettyVersion = '8.1.4.v20120524'
    javaModules = [
        ':modules:core', ':modules:uat'
    ]
    testNgModules = [
        ':modules:core'
    ]
    cukeModules = [
        ':modules:uat'
    ]
    archiveables = [':modules:core']
    localRepo = "${rootProject.projectDir}/lib"
    uploadables = [ "xite-${version}.zip".toString(), 
                    "xite-${version}.zip.sha1".toString()]
    javaVersion = System.getProperty('java.version')
    java7 = javaVersion.startsWith('1.7')
}

def printBuild(message) {
    if (hasProperty('buildoutput')) {
        logger.lifecycle("  ${message}")
    }
}

/*
// Prevent plugin from asking for a version number interactively
ext.'gradle.release.useAutomaticVersion' = "true"
release {
    failOnCommitNeeded=true
    failOnPublishNeeded=true
    failOnUnversionedFiles=true
    failOnUpdateNeeded=true
    includeProjectNameInTag=true
    requireBranch = null
}
*/

allprojects { project ->
    group = 'com.github.enr'
        
    buildDir = 'target'
    
    repositories {
        mavenLocal()
        mavenCentral()
        flatDir(dirs: file("${rootProject.projectDir}/lib"))        
        maven {
            url 'https://oss.sonatype.org/content/repositories/releases/'
        }
        maven {
            url 'http://groovypp.artifactoryonline.com/groovypp/libs-releases-local'
        }
        add(new org.apache.ivy.plugins.resolver.URLResolver()) {
            name = 'GitHub/Clap'
            addArtifactPattern 'http://cloud.github.com/downloads/enr/clap/[module]-[revision].[ext]'
            addIvyPattern 'http://cloud.github.com/downloads/enr/clap/[module]-[revision].pom'
        }
    }
}


subprojects {

    if (project.path in javaModules) {
        apply plugin: 'groovy'
        apply plugin: 'eclipse'
        apply plugin: 'about'

        configurations {
            compile.transitive = true
            testCompile.transitive = true
        }

        dependencies {
            groovy "org.codehaus.groovy:groovy-all:$groovyVersion"

            compile "org.codehaus.groovy:groovy-all:$groovyVersion",
                    'com.google.inject:guice:3.0',
                    'com.beust:jcommander:1.29',
                    'com.github.enr:clap-core:0.3.1-SNAPSHOT',
                    'com.github.enr:markdownj-extras:0.4',
                    'com.madgag:markdownj-core:0.4.1',
                    'com.google.guava:guava:13.0',
                    'commons-cli:commons-cli:1.2',  // needed from markdownj-extras
                    'commons-io:commons-io:1.4',        // needed from markdownj-extras
                    'org.apache.ant:ant-nodeps:1.8.1',
                    'org.apache.ant:ant-commons-net:1.8.0',
                    'org.slf4j:slf4j-api:1.6.0',
                    'org.slf4j:slf4j-log4j12:1.6.0',
                    'log4j:log4j:1.2.16'
            
            
            compile group: 'org.eclipse.jetty', name: 'jetty-server', version: "${jettyVersion}", transitive: false
            compile group: 'org.eclipse.jetty', name: 'jetty-util', version: "${jettyVersion}", transitive: false  
            compile group: 'org.eclipse.jetty', name: 'jetty-io', version: "${jettyVersion}", transitive: false
            compile group: 'org.eclipse.jetty', name: 'jetty-http', version: "${jettyVersion}", transitive: false
            compile group: 'org.eclipse.jetty', name: 'jetty-continuation', version: "${jettyVersion}", transitive: false 
            compile group: 'org.eclipse.jetty.orbit', name: 'javax.servlet', version: "3.0.0.v201112011016", ext: 'jar', transitive: false
                    
            testCompile 'org.testng:testng:6.8',
                        'org.easytesting:fest-assert-core:2.0M8'
        }

        archivesBaseName = "xite-${project.name}"

        sourceCompatibility = 1.6
        targetCompatibility = 1.6
        
        tasks.withType(Jar).each{ jarTask ->
            jarTask.manifest {
                Date buildTime = new Date()
                attributes(
                    'Built-By': System.properties['user.name'],
                    'Created-By': System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
                    'Build-Date': new SimpleDateFormat('dd-MMM-yyyy').format(buildTime),
                    'Build-Time': new SimpleDateFormat('hh:mm aa').format(buildTime),
                    'Implementation-Title': project.name,
                    'Implementation-Version': project.version
                )
            }
        }
        
        eclipse {
            project {
                name = "xite-${project.name}"
            }
            classpath {
                defaultOutputDir = new File("${project.buildDir}/eclipse/classes");
                downloadJavadoc = true
            }
        }
    }
    
    if (project.path in testNgModules) {
        test {
            useTestNG()
            testLogging.showStandardStreams = false            
            beforeTest { descriptor ->
                printBuild("--- Running test: " + descriptor)
            }
            onOutput { descriptor, event ->
                printBuild(event.message)
            }
        }
    }
    
    if (project.path in cukeModules) {
        apply from:   "${rootProject.getProjectDir().getAbsolutePath()}/gradle/tasks/cuke-check.gradle"
        test.dependsOn ':modules:core:installApp'
    }

    if (project.path in archiveables) {
        apply from:   "${rootProject.getProjectDir().getAbsolutePath()}/gradle/tasks/propsfile.gradle"
        propsfile {
            filename = 'xite-app.properties'
            props = [   'clap.meta.name':'xite' ,
                        'clap.meta.version':project.version ,
                        'clap.meta.displayname':'Xite' ]
        }

        if (java7) {
            apply from:'http://gradle.smokejumperit.com/github-dev.gradle'

            //   gradle uploadArchives -Dgithub.password=***
            //   gradle ghUpload -Dgithub.password=*** [ or system env 'GITHUB_PASS' ]
            ghUpload {
                username = 'enr'
                repo = 'xite'
            }

            ghUpload.doFirst { task ->
                configurations.archives.allArtifacts.each { artifact ->
                    def artifactFileName = artifact.file.getName()
                    def uploadable = (artifactFileName in uploadables)
                    if (! uploadable) {
                        println "removing '${artifactFileName}' from uploadable archives"
                        configurations.archives.artifacts.remove(artifact)
                    }
                }
            }
        }
                
        afterEvaluate {
            tasks.withType(Zip) { task ->
                task.doLast {
                    printBuild "after ev: ${it} ${it.archivePath}"
                    ant.checksum(file: it.archivePath, algorithm: 'SHA1', fileext: '.sha1')
                    
                }
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.3'
}

