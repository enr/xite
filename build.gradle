
import java.text.SimpleDateFormat

// --- release plugin
// see: http://tellurianring.com/wiki/gradle/release
//apply from: "https://launchpad.net/gradle-release/trunk/latest/+download/apply.groovy"

// --- about plugin
// see: http://evgeny-goldin.com/wiki/Gradle-about-plugin

group = 'com.github.enr'

buildscript {
    repositories { mavenRepo url: 'http://evgenyg.artifactoryonline.com/evgenyg/repo/' }
    dependencies { classpath "com.github.goldin.plugins:gradle:0.1.3" }
}

ext {
    groovyVersion = '2.0.0'
    jettyVersion = '8.1.4.v20120524'
    javaModules = [
        ':modules:core', ':modules:acceptance-tests'
    ]
    archiveables = [':modules:core']
    acceptanceTests = [':modules:acceptance-tests']
    localRepo = "${rootProject.projectDir}/lib"
    uploadables = [ "xite-${version}.zip".toString(), 
                    "xite-${version}.zip.MD5".toString()]
    javaVersion = System.getProperty('java.version')
    java7 = javaVersion.startsWith('1.7')
}





allprojects { project ->
    group = 'com.github.enr'
        
    buildDir = 'target'
    
    repositories {
        mavenLocal()
        mavenCentral()
        flatDir(dirs: file("${rootProject.projectDir}/lib"))        
        maven {
            url 'https://oss.sonatype.org/content/repositories/releases/'
        }
        maven {
            url 'http://groovypp.artifactoryonline.com/groovypp/libs-releases-local'
        }
        
        add(new org.apache.ivy.plugins.resolver.URLResolver()) {
            name = 'GitHub/Clap'
            addArtifactPattern 'http://cloud.github.com/downloads/enr/clap/[module]-[revision].[ext]'
            addIvyPattern 'http://cloud.github.com/downloads/enr/clap/[module]-[revision].pom'
        }
    }
    
    artifacts {
        tasks.withType(Zip) { task ->
            archives task
        }
    }
    
    afterEvaluate {
        tasks.withType(Zip) { task ->
            task.doLast {
                ant.checksum file: it.archivePath
            }
        }
    }
}


subprojects {

    if (project.path in javaModules) {
        apply plugin: 'groovy'
        apply plugin: 'eclipse'
        apply plugin: 'about'
        
        // work-around for jdk 7 javac warning for setting an older source without bootclasspath
        // def jdk6home = '/opt/java/jdk1.6.0_24'
        if (java7) {
            println "Java 7 detected (Java ${System.getProperty('java.version')})"
            compileGroovy.options.bootClasspath = '/opt/java/jdk1.6.0_24/jre/lib/rt.jar'
            compileJava.options.bootClasspath = '/opt/java/jdk1.6.0_24/jre/lib/rt.jar'
            test.bootstrapClasspath = files('/opt/java/jdk1.6.0_24/jre/lib/rt.jar') + test.bootstrapClasspath
        }

        configurations {
            compile.transitive = true
            testCompile.transitive = true
        }

        dependencies {
            groovy "org.codehaus.groovy:groovy-all:$groovyVersion"

            compile "org.codehaus.groovy:groovy-all:$groovyVersion",
                    'com.google.inject:guice:3.0',
                    //'javax.inject:javax.inject:1',
                    //'aopalliance:aopalliance:1.0',
                    //'org.sonatype.sisu.inject:cglib:2.2.1-v20090111',
                    //'asm:asm:3.1',
                    //'org.mbte.groovypp:gretty:0.4.279',
                    'com.beust:jcommander:1.27',
                    'com.github.enr:clap-core:0.2',
                    'com.github.enr:markdownj-extras:0.4',
                    'com.madgag:markdownj-core:0.4.1',
                    'com.google.guava:guava:12.0',
                    'commons-cli:commons-cli:1.2',  // needed from markdownj-extras
                    //'commons-lang:commons-lang:2.5',
                    'commons-io:commons-io:1.4',        // needed from markdownj-extras
                    //'org.apache.commons:commons-exec:1.0.1',
                    //'commons-codec:commons-codec:1.4',
                    'org.apache.ant:ant-nodeps:1.8.1',
                    'org.apache.ant:ant-commons-net:1.8.0',
                    'org.slf4j:slf4j-api:1.6.0',
                    'org.slf4j:slf4j-log4j12:1.6.0',
                    'log4j:log4j:1.2.16'
            
            
            compile group: 'org.eclipse.jetty', name: 'jetty-server', version: "${jettyVersion}", transitive: false
            compile group: 'org.eclipse.jetty', name: 'jetty-util', version: "${jettyVersion}", transitive: false  
            compile group: 'org.eclipse.jetty', name: 'jetty-io', version: "${jettyVersion}", transitive: false
            compile group: 'org.eclipse.jetty', name: 'jetty-http', version: "${jettyVersion}", transitive: false
            compile group: 'org.eclipse.jetty', name: 'jetty-continuation', version: "${jettyVersion}", transitive: false 
            compile group: 'org.eclipse.jetty.orbit', name: 'javax.servlet', version: "3.0.0.v201112011016", ext: 'jar', transitive: false
                    
            testCompile 'org.testng:testng:6.5.2',
                        'org.easytesting:fest-assert-core:2.0M6'
        }

        test {
            useTestNG()
            //makes the standard streams (err and out) visible at console when running tests
            testLogging.showStandardStreams = false
            //listening to test execution events
            
            beforeTest { descriptor ->
                logger.lifecycle("-------    Running test: " + descriptor)
            }
            onOutput { descriptor, event ->
                logger.lifecycle(event.message )
            }
            
        }
        
        archivesBaseName = "xite-${project.name}"

        sourceCompatibility = 1.6
        targetCompatibility = 1.6

        jar.doLast { task ->
            ant.checksum file: task.archivePath
        }
        
        task sourceJar(type: Jar) {
            from sourceSets.main.allSource
            classifier = 'sources'
        }

        task javadocJar(type: Jar, dependsOn: 'javadoc') {
            from javadoc.destinationDir
            classifier = 'javadoc'
        }
        
        tasks.withType(Jar).each{ jarTask ->
            jarTask.manifest {
                Date buildTime = new Date()
                attributes(
                    'Built-By': System.properties['user.name'],
                    'Created-By': System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
                    'Build-Date': new SimpleDateFormat('dd-MMM-yyyy').format(buildTime),
                    'Build-Time': new SimpleDateFormat('hh:mm aa').format(buildTime),
                    'Implementation-Title': project.name,
                    'Implementation-Version': project.version
                )
            }
        }

        artifacts {
            archives sourceJar, javadocJar
            def md5 = []
            configurations.archives.allArtifacts.files.each { File file ->
                md5 << "${file.getAbsolutePath()}.MD5"
            }
            md5.each { checksum ->
                archives file(checksum)
            }
        }

        /*
        assemble.doFirst {
            configurations.archives.allArtifacts.files.each { File file ->
                println "archive : $file"
            }
        }
        */

        assemble.doLast { task ->
            configurations.archives.allArtifacts.each { artifact ->
                def artifactFileName = artifact.file.getName()
                def uploadable = (artifactFileName in uploadables)
                if (! uploadable) {
                    println "removing '${artifactFileName}' from uploadable archives"
                    configurations.archives.artifacts.remove(artifact)
                }
            }
        }
        
        about { dumpDependencies = false }
        
        eclipse {
            project {
                name = "xite-${project.name}"
            }
            classpath {
                // to keep the same depth in the build from in and outside Eclipse
                defaultOutputDir = new File("${project.buildDir}/eclipse/classes");
                downloadJavadoc = true
            }
        }
    }
    
    if (project.path in archiveables) {
        task archive(   dependsOn: [':modules:core:assemble'],
                        description: 'Print archives') << {
            configurations.archives.allArtifacts.files.each { File file ->
                    println "[ARCHIVE] $file"
            }
        }
        
        if (java7) {
            // After 'group' is set...
            //apply from:'github-dev.gradle'
            apply from:'http://smokejumperit.com/github-dev.gradle'

            //   gradle uploadArchives -Dgithub.password=***
            //   gradle ghUpload -Dgithub.password=***
            ghUpload {
                username = 'enr' // If the code guesses the username wrong: see source for defaults
                //password = '***' // Or set Java prop 'github.password' or system env 'GITHUB_PASS'
                repo = 'xite'
            }
            ghUpload.doFirst { task ->
                configurations.archives.allArtifacts.each { artifact ->
                    def artifactFileName = artifact.file.getName()
                    def uploadable = (artifactFileName in uploadables)
                    if (! uploadable) {
                        println "removing '${artifactFileName}' from uploadable archives"
                        configurations.archives.artifacts.remove(artifact)
                    }
                }
            }
            uploadArchives.doFirst {
                configurations.archives.allArtifacts.files.each { File file ->
                    println "archive : $file"
                }
            }
        }
    }

    if (project.path in acceptanceTests) {
        test.enabled = false
        task sut(   dependsOn: [':modules:core:test', ':modules:core:test', ':modules:core:installApp'],
                    description: 'Builds the system under test (using installApp).') << {
            test.enabled = true
        }
        task uat(   dependsOn: [sut, test], 
                    description: 'Runs the user acceptance tests.') << {
            test {
                enabled = true
                //testLogging.showStandardStreams = true            
                beforeTest { descriptor ->
                    logger.lifecycle("-------    Running test: " + descriptor)
                }
                onOutput { descriptor, event ->
                    logger.lifecycle(event.message )
                }
            }
        }
    }
}



