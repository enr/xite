
import groovy.json.JsonSlurper

// minimal work around to fail the build if cucumber tests fail.
/*
task cukeReport(dependsOn:[tasks.test]) {
    ext.json = 'cucumber-report.json'
    def cukeJson = new File(buildDir, ext.json)
    // if cukeJson.exists() ...
    def jsonObj = new JsonSlurper().parseText( cukeJson.text )
    for (element in jsonObj.elements) {
        for (scenario in element) {
            def scenarioId = scenario.id
            def steps = scenario.steps
            for (step in steps) {
                def res = step.result
                def name = step.name
                if (res) {
                    if (res.status != 'passed' ) {
                        throw new TaskExecutionException(test, new RuntimeException("scenario ${scenarioId} fail".toString()))
                    }
                }
            }
        }
    }
}
*/

task info(type: InfoTask)

class InfoTask extends DefaultTask {
    @Optional String prefix = 'Current Gradle version'
    @TaskAction
    def info() {
        println "$prefix: $project.gradle.gradleVersion"
    }
}

task cuke(type: CukeTask)
tasks.cuke.dependsOn tasks.test

class CukeTask extends DefaultTask {

    @Optional String json = 'cucumber.json'

    @TaskAction
    def check() {

        def cukeJson = new File(project.buildDir, json)
        // if cukeJson.exists() ...
        def jsonObj = new JsonSlurper().parseText( cukeJson.text )
        for (element in jsonObj.elements) {
            for (scenario in element) {
                def scenarioId = scenario.id
                def steps = scenario.steps
                for (step in steps) {
                    def res = step.result
                    def name = step.name
                    if (res) {
                        if (res.status != 'passed' ) {
                            throw new TaskExecutionException(project.tasks.test, new RuntimeException("scenario ${scenarioId} step ${name} fail with status '${res.status}'".toString()))
                        }
                    }
                }
            }
        }
    
    }
}