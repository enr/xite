import com.smokejumperit.api.GitHubApi3

apply plugin:'java'
apply plugin:'maven'

// Inline the github-libs import

buildscript {
  repositories {
    add(new org.apache.ivy.plugins.resolver.URLResolver()) {
      name = 'GitHub'
      addArtifactPattern 'http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].[ext]'
      addIvyPattern 'http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].pom'
    }
  }
}

repositories {
  add(new org.apache.ivy.plugins.resolver.URLResolver()) {
    name = 'GitHub'
    addArtifactPattern 'http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].[ext]'
    addIvyPattern 'http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].pom'
  }
}

// Now begin new code

buildscript {
	repositories {
		mavenCentral()	
		mavenRepo url:'http://repo.smokejumperit.com'
		mavenRepo url:'http://repository.codehaus.org'
	}
	dependencies {
		classpath 'RobertFischer:github-api-3:0.0.2'
	}
}

task ghWritePom(dependsOn:[configurations.archives.allArtifacts]) {
	ext.pom = pom({})

	def tmpPom = File.createTempFile("pom", "xml")
	tmpPom.deleteOnExit()
	ext.pomFile = tmpPom

	def proj = this.project
	doLast {
		// For some reason, this stuff wasn't being set appropriately
		pom.model.name = pom.model.name ?: proj.name
		pom.version = (pom.version && pom.version != "0") ? pom.version : proj.version
		pom.artifactId = (pom.artifactId && pom.artifactId != "empty-project") ? pom.artifactId : proj.name
		pom.groupId = (pom.groupId && pom.groupId != "unknown") ? pom.groupId : proj.group

		logger.info("Writing GitHub pomfile to ${pomFile.canonicalPath}")
		logger.debug("POM Version: ${pom.version ?: 'EMPTY'}")
		logger.debug("POM ArtifactId: ${pom.artifactId ?: 'EMPTY'}")
		logger.debug("POM GroupId: ${pom.groupId ?: 'EMPTY'}")
		pom.writeTo(pomFile)
		logger.debug("pom file:\n${pomFile.text}")
	}
}

task ghUpload(dependsOn:[configurations.archives.allArtifacts, tasks.ghWritePom]) {
	ext.username = System.getProperty("github.username", System.getenv("GITHUB_USER")) ?: project.group ?: System.getProperty('user.name')
	ext.password = System.getProperty("github.password", System.getenv("GITHUB_PASS"))
	ext.repo = rootProject.name

	onlyIf {
		if(!password) {
			logger.error(
				"Need password to upload to GitHub: set ghUpload task property 'password', Java property 'github.password', or system property 'GITHUB_PASS'"
			)
			return false
		} else {
			return true
		}
	}

	doLast {
		logger.info("Releasing to GitHub repository $username/$repo")
		println "Releasing to GitHub repository $username/$repo"
		def gitHub = new GitHubApi3(username, password, repo) 

		def fileBase = "$repo-$project.version"
		println "file base : $repo-$project.version"

		def downloads = gitHub.listDownloads()
		downloads.findAll { it.name.toLowerCase().startsWith(fileBase.toLowerCase()) }.each {
			logger.warn("Deleting download $it.id because its name starts with $fileBase: $it.name")
			it.delete()
		}

		def time = System.currentTimeMillis()
		def description = "$project.name $project.version $time (${new Date(time)})"
		configurations.archives.allArtifacts.files.each { File file ->
			logger.info("Uploading $file - $description")
			println "Uploading $file - $description"
			gitHub.createDownload(file, description)
		}

		logger.info("Uploading pom: ${fileBase}.pom")
		gitHub.createDownload(tasks.ghWritePom.pomFile, "${fileBase}.pom", "$project.name $project.version pom file ($time)")
	}
}

tasks.uploadArchives.dependsOn tasks.ghUpload
