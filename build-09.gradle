
import java.io.File;
import groovy.xml.DOMBuilder
import groovy.xml.dom.DOMCategory
import groovy.xml.XmlUtil

//archivesBaseName = 'xite'
group = 'xite'
version = '0.1-SNAPSHOT'

defaultTasks 'clean', 'app'

apply plugin: 'groovy'
apply plugin: 'eclipse'

// needed for integration tests
//usePlugin(com.smokejumperit.gradle.ClassLoadersPlugin)

buildDirName = 'target'

appBuildDir = "${buildDirName}/app"

defaultLocalRepo = 'file://'+System.getProperty('user.home') + File.separator + ".m2" + File.separator + "repository"

localRepo = defaultLocalRepo

def m2userSettingsPath = System.getProperty('user.home') + File.separator + ".m2" + File.separator + "settings.xml"

def m2userSettingsFile = new File(m2userSettingsPath)

if (m2userSettingsFile.exists()) {
    def m2userSettingsDoc = DOMBuilder.parse(new FileReader(m2userSettingsFile))
    def m2userSettings = m2userSettingsDoc.documentElement
    use(DOMCategory){
      def foundLocalRepo = m2userSettings.localRepository[0]?.text()
      if (foundLocalRepo != null) localRepo = foundLocalRepo
    }
}
logger.debug("using local repository ${localRepo}")

repositories {
    // libraries not in maven repo
    flatDir(dirs: file('lib'))
    // usually $HOME/.m2/repository
    mavenRepo urls: [defaultLocalRepo, localRepo]
    mavenCentral()
}

dependencies {
    compile 'com.github.enr:markdownj-extras:0.3-SNAPSHOT',
            'com.github.enr.markdownj:markdownj-core:0.4-SNAPSHOT',
            'commons-cli:commons-cli:1.2',
            'commons-lang:commons-lang:2.5',
            'commons-io:commons-io:1.4',
            'org.apache.commons:commons-exec:1.0.1',
            'commons-codec:commons-codec:1.4',
            'org.apache.ant:ant-nodeps:1.8.0',
            'org.apache.ant:ant-commons-net:1.8.0',
            'org.eclipse.jetty:jetty-server:7.0.1.v20091125',
            'org.slf4j:slf4j-api:1.6.0',
            'org.slf4j:slf4j-log4j12:1.6.0',
            'log4j:log4j:1.2.16'
    groovy module('org.codehaus.groovy:groovy-all:1.7.0')
}


task 'xite-deps'(dependsOn: configurations.default.buildArtifacts, type: Copy) {
    into("${appBuildDir}/lib")
    from configurations.default
    from configurations.default.allArtifacts*.file // (xite jars)
    description = 'Creates the working application in target directory.'
}

task 'xite-bin'(dependsOn: 'xite-deps', type:Copy) {
    from 'src/dist/bin/xite.sh'
    into "${appBuildDir}/bin"
    rename('.sh$', '')
    description = 'Creates the working application in target directory.'
}

task 'xite-plugins'(dependsOn: 'xite-bin', type:Copy) {
    from 'src/dist/plugins'
    into "${appBuildDir}/plugins"
    description = 'Creates the working application in target directory.'
}

task 'xite-conf'(dependsOn: 'xite-plugins', type:Copy) {
    from 'src/dist/conf'
    into "${appBuildDir}/conf"
    description = 'Creates the working application in target directory.'
}

task app(dependsOn: 'xite-conf') {
    description = 'Creates the working application in target directory.'
}

app.doLast { 
    logger.debug("App builded in ${appBuildDir}")
    def binDir = new File("${appBuildDir}/bin")
    if (binDir.exists()) {
      ant.chmod(perm: "+x", dir: binDir, includes: '*')
    }
}

task 'xite-doc'(dependsOn: ':app', type:Copy) {
    from 'README.markdown'
    into "${appBuildDir}/"
    rename('.markdown$', '.txt')
    description = 'Add docs for distribution.'
}

task dist(type: Zip, dependsOn: ':xite-doc') {
    description = 'Creates the distributable archive.'
    from(appBuildDir)
}

dist.doLast { logger.debug("Distribution file ${dist.archiveName}") }

